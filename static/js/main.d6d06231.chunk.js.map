{"version":3,"sources":["components/Clock.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","props","tick","currentTime","Date","setState","hours","getHours","minutes","getMinutes","seconds","getSeconds","state","timerId","this","setInterval","clearInterval","className","padZero","digits","Number","isNaN","parseInt","toString","padStart","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAOqBA,E,kDAKjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAmBVC,KAAO,WACH,IAAIC,EAAc,IAAIC,KACtB,EAAKC,SAAS,CACVC,MAAOH,EAAYI,WACnBC,QAASL,EAAYM,aACrBC,QAASP,EAAYQ,gBAvBzB,EAAKC,MAAQ,GACb,EAAKC,QAAU,KAHA,E,qDAgCnB,WAEIC,KAAKZ,OACLY,KAAKD,QAAUE,YAAYD,KAAKZ,KAAM,O,kCAM1C,WAEIc,cAAcF,KAAKD,W,oBAMvB,WACI,MAAkCC,KAAKF,MAAjCN,EAAN,EAAMA,MAAOE,EAAb,EAAaA,QAASE,EAAtB,EAAsBA,QACtB,OACI,sBAAKO,UAAU,QAAf,UACKjB,EAAMkB,QAAQZ,GADnB,IAC4BN,EAAMkB,QAAQV,GAD1C,IACqDR,EAAMkB,QAAQR,S,sBA1C3E,SAAeS,GACX,OAAIC,OAAOC,MAAMF,EAASG,SAASH,EAAQ,KAChC,KACJA,EAAOI,WAAWC,SAAS,EAAG,S,GAnBVC,IAAMC,WCI1BC,MARf,WACI,OACI,qBAAKV,UAAU,MAAf,SACI,cAAC,EAAD,OCMGW,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.d6d06231.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Clock.css';\r\n\r\n\r\n/**\r\n * A simple digital clock\r\n */\r\nexport default class Clock extends React.Component {\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.timerId = null;\r\n    }\r\n\r\n    /**\r\n     * Take an number (Number|String) and return\r\n     * a zero-padded string of length 2 if digits can\r\n     * be converted, else return '--' to keep a consistent display\r\n     */\r\n    static padZero(digits) {\r\n        if (Number.isNaN(digits = parseInt(digits, 10)))\r\n            return '--';\r\n        return digits.toString().padStart(2, '0');\r\n    }\r\n\r\n    /**\r\n     * Update state with current time\r\n     */\r\n    tick = () => {\r\n        let currentTime = new Date();\r\n        this.setState({\r\n            hours: currentTime.getHours(),\r\n            minutes: currentTime.getMinutes(),\r\n            seconds: currentTime.getSeconds(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The clock has been inserted into the DOM\r\n     */\r\n    componentDidMount() {\r\n        // First update the time and setup a timer\r\n        this.tick();\r\n        this.timerId = setInterval(this.tick, 1000);\r\n    }\r\n\r\n    /**\r\n     * The clock will be removed from the DOM\r\n     */\r\n    componentWillUnmount() {\r\n        // Remove the timer\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        let { hours, minutes, seconds } = this.state;\r\n        return (\r\n            <div className='Clock'>\r\n                {Clock.padZero(hours)}:{Clock.padZero(minutes)}:{Clock.padZero(seconds)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\nimport Clock from './components/Clock';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Clock />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}